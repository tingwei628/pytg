name: build

on:
  push:
  pull_request:
    # types:
    #   - opened
    #   - synchronize
    branches:
      - main
    paths:
      - 'src/**/*.py'
      - 'tests/**/*.py'
      - '*.py'
      # exclude files, start with !
      - '!**.md'

jobs:
  package-pytg:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          # - macos-latest
          # - windows-latest
        python-version:
          #- '3.6'
          - '3.8'
        # exclude:
        #   - os: macos-latest
        #     python-version: '3.8'
        #   - os: windows-latest
        #     python-version: '3.6'

        # django: 
        #   - '3.0'
        #   - '3.1'


      #fail-fast: false

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
      - uses: actions/checkout@v2

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry
        uses: abatilo/actions-poetry@v2.0.0

      - name: Cache Poetry virtualenv
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry
          key: ${{ matrix.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ matrix.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Add Poetry to $PATH
        run: |
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: |
          # poetry config virtualenvs.in-project true
          poetry config virtualenvs.in-project false
          poetry config virtualenvs.path ~/.cache/pypoetry

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: poetry install

      # - name: Lint
      #   run: |
      #     # flake8
      #     # stop the build if there are Python syntax errors or undefined names
      #     poetry run flake8 . --exclude .venv --count --select=E9,F63,F7,F82 --show-source --statistics
      #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
      #     poetry run flake8 . --exclude .venv --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # - name: Format
      #   run: poetry run black . --check
      
      - name: Test
        run: |
          # pytest
          poetry run pytest
      
      - name: Build
        #uses:
        #  with:
        run: poetry build

      # - name: Publish
        #uses:
        #  with:
        #run:
      # publish: #poetry publish to github release
      # - name: Upload a Build Articraft
      #   uses: actions/upload-artifact@v2.2.0
      #   with:
        # Artifact name
          # name: pytg
        # A file, directory or wildcard pattern that describes what to upload
          # path: dist/
        # The desired behavior if no files are found using the provided path.
          # if-no-files-found: error
        # Duration after which artifact will expire in days. 0 means using default retention.
          #retention-days: 90
         